import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# URL –Ω–∞ —Ç–≤–æ–π –º–∏–Ω–∏-–∞–ø–ø, —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–π –Ω–∞ Vercel –∏–ª–∏ GitHub Pages
WEB_APP_URL = "https://vercel-gray-gamma.vercel.app/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø üöÄ", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–∞–ø–ø.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞
@dp.message(F.web_app_data)
async def webapp_data_handler(message: Message):
    data = message.web_app_data.data
    await message.answer(f"üì¨ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞:\n<code>{data}</code>")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

