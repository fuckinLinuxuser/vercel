from aiogram import Router, F
from aiogram.types import Message
from app.config import ADMINS
from aiogram.filters import Command
from app.keyboards import admin_kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


router = Router()

class Form(StatesGroup):
    waiting_for_post = State()

@router.message(F.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cmd_add_post(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:")
    await state.set_state(Form.waiting_for_post)

@router.message(Form.waiting_for_post)
async def process_post(message: Message, state: FSMContext, db):
    text = message.text.strip()
    full_name = message.from_user.full_name or message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    data = message.text
    if not text:
        return await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await db.execute(
        "INSERT INTO webapp_data (full_name, data) VALUES ($1, $2);",
        full_name,
        text
    )
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


class DeleteRecord(StatesGroup):
    waiting_for_id = State()

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def delete_record_start(message: Message, state: FSMContext):
    await message.answer("üóë –í–≤–µ–¥–∏ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteRecord.waiting_for_id)

@router.message(DeleteRecord.waiting_for_id)
async def delete_record_confirm(message: Message, state: FSMContext, db):
    if not message.text.isdigit():
        return await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    post_id = int(message.text)
    result = await db.execute("DELETE FROM webapp_data WHERE id = $1", post_id)
    
    if result == "DELETE 1":
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å #{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    await state.clear()




# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(F.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
async def list_posts(message: Message, db):
    rows = await db.fetch("SELECT id, full_name, data, created_at FROM webapp_data ORDER BY id DESC LIMIT 10")
    if not rows:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    text = "\n\n".join([
        f"#{r['id']} | {r['full_name']} | {r['created_at'].strftime('%d.%m')}\n {r['data']}"
        for r in rows
    ])
    await message.answer(f"üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def change_schedule(message: Message, state: FSMContext, db):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –ù–æ–º–µ—Ä –ø–∞—Ä—ã, –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\"")
    await state.set_state(Form.waiting_for_post)

@router.message(Form.waiting_for_post)
async def process_post(message: Message, state: FSMContext, db):
    await db.execute("INSERT INTO schedules (week_type, day_of_week, pair_number, subject) VALUES ($1, $2, $3, $4);", message.text)
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()
    

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n- /list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", reply_markup=admin_kb)    
