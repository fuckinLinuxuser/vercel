from aiogram import Router, F
from app.config import ADMINS
from aiogram.filters import Command
from app.keyboards import admin_inline_posts_kb, admin_inline_schedule_kb, admin_kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from app.middleware import DBMiddleware

router = Router()
class PostForm(StatesGroup):
    waiting_for_post = State()

@router.message(F.text == "‚úèÔ∏è –ó–∞–ø–∏—Å–∏")
async def cmd_posts(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_inline_posts_kb)


@router.callback_query(F.data == "add_post")
async def cmd_add_post(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:")
    await state.set_state(PostForm.waiting_for_post)

@router.message(PostForm.waiting_for_post)
async def process_post(message: Message, state: FSMContext, **kwargs):
    db = kwargs.get("db")
    text = message.text.strip()
    full_name = message.from_user.full_name or message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    data = message.text
    if not text:
        return await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await db.execute(
        "INSERT INTO webapp_data (full_name, data) VALUES ($1, $2);",
        full_name,
        text
    )
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


class DeleteRecord(StatesGroup):
    waiting_for_record_id = State()

@router.callback_query(F.data == "delete_post")
async def delete_record_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥–∏ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteRecord.waiting_for_record_id)

@router.message(DeleteRecord.waiting_for_record_id)
async def delete_record_confirm(message: Message, state: FSMContext, **kwargs):
    db = kwargs.get("db")
    if not message.text.isdigit():
        return await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    post_id = int(message.text)
    result = await db.execute("DELETE FROM webapp_data WHERE id = $1", post_id)
    
    if result == "DELETE 1":
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å #{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.callback_query(F.data == "list_posts")
async def list_posts(callback: CallbackQuery, state: FSMContext, **kwargs):
    db = kwargs.get("db")
    rows = await db.fetch("SELECT id, full_name, data, created_at FROM webapp_data ORDER BY id DESC LIMIT 10")
    if not rows:
        return await callback.message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    text = "\n\n".join([
        f"#{r['id']} | {r['full_name']} | {r['created_at'].strftime('%d.%m')}\n {r['data']}"
        for r in rows
    ])
    await callback.message.answer(f"üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

class ScheduleForm(StatesGroup):
    waiting_for_data = State()


@router.callback_query(F.data == "change_schedule")
async def change_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\"–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –ù–æ–º–µ—Ä –ø–∞—Ä—ã, –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\"\n–ü—Ä–∏–º–µ—Ä: 1, 3, 2, –ê–ª–≥–µ–±—Ä–∞")
    await state.set_state(ScheduleForm.waiting_for_data)
    
@router.message(ScheduleForm.waiting_for_data)
async def process_data(message: Message, state: FSMContext, **kwargs):
    db = kwargs.get("db")
    text = message.text.strip()
    parts = [p.strip() for p in text.split(",")]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(parts) != 4:
        return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    week_type_str, day_of_week_str, pair_number_str, subject = parts

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ ‚Äî —á–∏—Å–ª–∞
    if not (week_type_str.isdigit() and day_of_week_str.isdigit() and pair_number_str.isdigit()):
        return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    week_type = int(week_type_str)
    day_of_week = int(day_of_week_str)
    pair_number = int(pair_number_str)

    # –û—Ç–ª–∞–¥–∫–∞
    print("DEBUG types:",
          type(week_type), week_type,
          type(day_of_week), day_of_week,
          type(pair_number), pair_number,
          type(subject), subject)

    # –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É
    await db.execute(
        "INSERT INTO schedules (week_type, day_of_week, pair_number, subject) VALUES ($1, $2, $3, $4);",
        week_type,
        day_of_week,
        pair_number,
        subject
    )

    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()  
